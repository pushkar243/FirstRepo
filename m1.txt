def build_combined_query(intentions, conjunction=None, fa_name=None, total_limit=None):
    """
    Build a combined SQL query using UNION ALL across intention groups.

    Args:
        intentions (list of lists): Each sublist contains intention keywords.
        conjunction (str): Unused in UNION mode but kept for compatibility.
        fa_name (str): Optional FA name filter.
        total_limit (int): Optional limit on total rows returned.

    Returns:
        str: Final SQL query string.
    """
    try:
        if not intentions or not isinstance(intentions, list):
            raise ValueError("Intentions must be a non-empty list of lists.")

        queries = []

        for group in intentions:
            if not group:
                continue

            # Build the OR clause for this group
            group_clause = " OR ".join([f"insight_type ILIKE '%{intent}%'" for intent in group])
            intention_filter = f"({group_clause})"

            # Add FA filter if applicable
            fa_filter = ""
            if fa_name and fa_name != "FA_NOT_MENTIONED":
                fa_filter = f" AND array_to_string(fa_names, ',') ILIKE '%{fa_name}%'"

            # Final WHERE clause
            where_clause = f"WHERE {intention_filter}{fa_filter}"

            # Single group query (limit per group)
            query = f"""
                SELECT 
                    insight_type, fa_names, acc_nm, included_clients,
                    REGEXP_REPLACE(narrative_raw, '<[^>]+>', '', 'g') AS narrative_raw
                FROM {settings.pgsql_schema}.{settings.pgsql_table}
                {where_clause}
                LIMIT 10
            """
            queries.append(query.strip())

        # Combine all with UNION ALL
        union_query = "\nUNION ALL\n".join(queries)

        # Optional total limit wrapper
        if total_limit:
            final_query = f"""
                SELECT * FROM (
                    {union_query}
                ) AS combined_results
                LIMIT {total_limit}
            """
        else:
            final_query = union_query

        print("Generated SQL:\n", final_query)  # Optional: remove in prod
        return final_query

    except Exception as e:
        logger.exception(f"Error in building combined query. Error: {e}")
        return None


--------------------------------------------------------
SELECT REGEXP_REPLACE(your_column, '<[^>]*>', '', 'g') AS cleaned_text
FROM your_table;✅

Step-by-Step: Setup with Conda + Python 3.11
🔹 Step 1: Create a Conda Environment with Python 3.11
In your terminal:

bash
Copy
Edit
conda create -n promptwizard-env python=3.11 -y
Activate it:

bash
Copy
Edit
conda activate promptwizard-env
🔹 Step 2: Set Up Your Project Structure
Ensure your folder looks like this:

arduino
Copy
Edit
PromptWizard/
├── promptwizard/
│   ├── __init__.py        ← Your PromptWizard class lives here
├── pythonProject/
│   └── test.py            ← Testing script
├── setup.py
🔹 Step 3: Create the setup.py File
In the root PromptWizard/ folder, create setup.py:

python
Copy
Edit
# setup.py

from setuptools import setup, find_packages

setup(
    name='promptwizard',
    version='0.1',
    packages=find_packages(),
    description='A lightweight prompt template runner',
    author='Your Name',
    install_requires=[],
)
🔹 Step 4: Install the Package in Editable Mode
Inside the promptwizard-env Conda environment:

bash
Copy
Edit
pip install -e .
Even in Conda, pip works fine for installing editable packages.

🔹 Step 5: Run Your Test Script
Make sure you're still in the promptwizard-env environment and run:

bash
Copy
Edit
python pythonProject/test.py
🧠 Recap
You now have:

✅ A Conda environment named promptwizard-env

✅ Python version 3.11

✅ A locally installable prompt package using pip install -e .


query = f"""
    SELECT 
        REGEXP_REPLACE(RIGHT(LEFT(global_key, LENGTH(global_key)-13), LENGTH(global_key)-13), '[^a-zA-Z0-9_]', '', 'g') AS global_key,
        REGEXP_REPLACE(target_type, '[^a-zA-Z0-9_]', '', 'g') AS target_type,
        REGEXP_REPLACE(target_key, '[^a-zA-Z0-9_]', '', 'g') AS target_key,
        acc_mhh_n, insight_type,
        ARRAY_TO_STRING(fa_names, '|') AS fa_names,
        ARRAY_TO_STRING(fa_ids, '|') AS fa_ids,
        narrative_title_plain,
        narrative_raw
    FROM sandbox_whared.si_nlg.fa_narratives_review_curr
    WHERE MOD(ABS(HASHTEXT(global_key)), 16) = {key_mod}
"""

03/07
class PromptWizard:
    def __init__(self):
        print("PromptWizard initialized")

    def run(self):
        print("Running PromptWizard logic")
Then your test.py will work with:

python
Copy
Edit
from promptwizard import PromptWizard

wizard = PromptWizard()
wizard.run()

from promptwizard import PromptWizard

def main():
    # Initialize PromptWizard
    wizard = PromptWizard()

    # Set your prompt manually (or read from file)
    prompt = """
    You are an expert summarizer. Summarize the following text in one paragraph:

    TEXT:
    Artificial Intelligence is a field of computer science that enables machines to mimic human intelligence...
    """

    # Run PromptWizard with the prompt
    response = wizard.run(prompt)

    # Print the response
    print("Generated Output:\n", response)

if __name__ == "__main__":
    main()

02/07

import math
import pandas as pd

# Define batch size
batch_size = 1000
total_rows = len(df)

# Loop over DataFrame in batches
for i in range(0, total_rows, batch_size):
    # Get the current batch
    batch = df.iloc[i:i + batch_size].copy()
    
    # Clean and prepare the input text (if needed)
    batch["narrative_raw_plain"] = batch["narrative_raw"].apply(remove_html_tags)
    texts = batch["narrative_raw_plain"].fillna("").tolist()  # Avoid NaNs
    
    # Compute embeddings in batch using embed_documents
    batch["embedding_list"] = embeddings.embed_documents(texts)

# Safely assign back
    batch["embedding"] = embeddings_list

    # Optional print for tracking
    print(f"Embedding completed for batch {i // batch_size + 1}")

    # Write to database or wherever needed
    helper.write_to_db(batch, db_settings)



23/06
SELECT
    array_to_string(fa_names, '') AS fa_names,
    insight_type,
    array_to_string(
        ARRAY(
            SELECT fa || ' -> ' || insight_type
            FROM unnest(fa_names) AS fa
        ),
        ', '
    ) AS fa_insight_mapping
FROM
    sandbox_wma_shared.si_nlg_fa_narratives_review_curr2;


SELECT
    fa AS fa_name,
    insight_type
FROM
    sandbox_wma_shared.si_nlg_fa_narratives_review_curr2,
    UNNEST(fa_names) AS fa;


SELECT
    fa AS fa_name,
    ARRAY_AGG(DISTINCT insight_type) AS insight_types
FROM
    sandbox_wma_shared.si_nlg_fa_narratives_review_curr2,
    UNNEST(fa_names) AS fa
GROUP BY
    fa;


SELECT
    insight_type,
    ARRAY_AGG(DISTINCT fa) AS fa_names
FROM
    sandbox_wma_shared.si_nlg_fa_narratives_review_curr2,
    UNNEST(fa_names) AS fa
GROUP BY
    insight_type;

----------------------------------------------------------------------

WITH unnested_fa_names AS (
    SELECT unnest(fa_names) AS fa_name
    FROM sandbox_wma_shared.si_nlg_fa_narratives_review_curr2
),
fa_name_counts AS (
    SELECT fa_name, COUNT(*) AS cnt
    FROM unnested_fa_names
    GROUP BY fa_name
)
SELECT 
    fa_name,
    cnt AS occurrence_count
FROM fa_name_counts
WHERE cnt < 5
ORDER BY cnt ASC, fa_name;
